/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jedi.netbeans;

import com.jedi.metadata.DatabaseMetadataUtil;
import com.jedi.metadata.PackageMetadata;
import com.jedi.metadata.ProcedureMetadata;
import com.sun.org.apache.bcel.internal.generic.StoreInstruction;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import org.jdesktop.swingx.autocomplete.ComboBoxCellEditor;
import org.netbeans.api.db.explorer.ConnectionManager;
import org.netbeans.api.db.explorer.DatabaseConnection;
import org.openide.util.Exceptions;

public final class CreationVisualPanel1 extends JPanel {

    ConnectionManager connectionManager = new ConnectionManager();

    public void updateView() {

    }

    /**
     * Creates new form CreationVisualPanel1
     */
    public CreationVisualPanel1() {
        initComponents();
        comboPackages.setModel(new DefaultComboBoxModel());
        listProcedure.setModel(new DefaultListModel());
        
        
        AutoCompleteDecorator.decorate(comboPackages);
        ComboBoxCellEditor editor = new ComboBoxCellEditor(comboPackages);
        CellEditorListener listener = new CellEditorListener() {
            @Override
            public void editingStopped(ChangeEvent e) {
                final Object item = comboPackages.getSelectedItem();
                if (item != null && (item instanceof PackageMetadata)) {
                    comboPackages.setEditable(false);
                    listProcedure.setEnabled(false);
                    listProcedure.setModel(new DefaultListModel());
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            showProcedures((PackageMetadata) item);
                        }
                    });
                    comboPackages.setEditable(true);
                    listProcedure.setEnabled(true);
                }
            }

            @Override
            public void editingCanceled(ChangeEvent e) {

            }
        };

        editor.addCellEditorListener(listener);

    }

    @Override
    public String getName() {
        return "Choose the stored procedure";
    }

    private void showProcedures(PackageMetadata packageMetadata) {
        Connection connection = getConnection();
        try {
            List<ProcedureMetadata> list = DatabaseMetadataUtil.getProcedures(connection, packageMetadata);
            if (list != null && !list.isEmpty()) {
                DefaultListModel model = new DefaultListModel();
                for (ProcedureMetadata procedureMetadata : list) {
                    model.addElement(procedureMetadata);
                }

                listProcedure.setModel(model);
                listProcedure.setSelectedIndex(0);
            }

        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    private ComboBoxModel getAvailableConnections() {
        return new DefaultComboBoxModel(connectionManager.getConnections());
    }

    private ComboBoxModel getAvailablePackages(Connection connection) throws SQLException {
        ComboBoxModel result = null;
        List<PackageMetadata> list = DatabaseMetadataUtil.getPackages(connection);
        if (list != null && !list.isEmpty()) {
            result = new DefaultComboBoxModel(list.toArray());
        }

        return result;
    }

    private Connection getConnection() {
        Connection result = null;
        Object item = comboConnections.getSelectedItem();
        if (item != null && item instanceof DatabaseConnection) {
            DatabaseConnection dc = (DatabaseConnection) item;
            result = dc.getJDBCConnection();
        }
        return result;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connectButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        newConnectionButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        comboConnections = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        textSearch = new javax.swing.JTextField();
        comboPackages = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        listProcedure = new javax.swing.JList();

        setPreferredSize(new java.awt.Dimension(662, 472));

        org.openide.awt.Mnemonics.setLocalizedText(connectButton, org.openide.util.NbBundle.getMessage(CreationVisualPanel1.class, "CreationVisualPanel1.connectButton.text")); // NOI18N
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connect(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(newConnectionButton, org.openide.util.NbBundle.getMessage(CreationVisualPanel1.class, "CreationVisualPanel1.newConnectionButton.text")); // NOI18N
        newConnectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newConnectionButtoncreateNewConnection(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(CreationVisualPanel1.class, "CreationVisualPanel1.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(CreationVisualPanel1.class, "CreationVisualPanel1.jLabel1.text")); // NOI18N

        comboConnections.setModel(getAvailableConnections());
        comboConnections.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choseConnection(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(CreationVisualPanel1.class, "CreationVisualPanel1.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(CreationVisualPanel1.class, "CreationVisualPanel1.jLabel4.text")); // NOI18N

        textSearch.setText(org.openide.util.NbBundle.getMessage(CreationVisualPanel1.class, "CreationVisualPanel1.textSearch.text")); // NOI18N

        comboPackages.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        listProcedure.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listProcedure);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(23, 173, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboConnections, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jSeparator1)
                            .addComponent(jSeparator2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textSearch)
                                    .addComponent(comboPackages, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(connectButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(newConnectionButton)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboConnections, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newConnectionButton)
                    .addComponent(connectButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboPackages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(textSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void connect(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connect
        try {
            comboPackages.setEnabled(false);
            comboConnections.setEnabled(false);
            connectButton.setEnabled(false);
            newConnectionButton.setEnabled(false);
            textSearch.setEnabled(false);
            listProcedure.setEnabled(false);

            DatabaseConnection sc = (DatabaseConnection) comboConnections.getSelectedItem();
            if (sc != null) {
                connectionManager.showConnectionDialog(sc);
            }

            final Connection connection = getConnection();
            SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {
                    ComboBoxModel model = null;
                    try {
                        model = getAvailablePackages(connection);
                    } catch (SQLException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                    comboPackages.setModel(model);
                }
            });
        } catch (Exception e) {
            Exceptions.printStackTrace(e);
        } finally {
            comboPackages.setEnabled(true);
            comboConnections.setEnabled(true);
            newConnectionButton.setEnabled(true);
            textSearch.setEnabled(true);
            listProcedure.setEnabled(true);

        }


    }//GEN-LAST:event_connect

    private void newConnectionButtoncreateNewConnection(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newConnectionButtoncreateNewConnection
        connectionManager.showAddConnectionDialog(null);
        comboConnections.setModel(getAvailableConnections());

    }//GEN-LAST:event_newConnectionButtoncreateNewConnection

    private void choseConnection(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choseConnection
        connectButton.setEnabled(true);
    }//GEN-LAST:event_choseConnection

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboConnections;
    private javax.swing.JComboBox comboPackages;
    private javax.swing.JButton connectButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JList listProcedure;
    private javax.swing.JButton newConnectionButton;
    private javax.swing.JTextField textSearch;
    // End of variables declaration//GEN-END:variables
}
